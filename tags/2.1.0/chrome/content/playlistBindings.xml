<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE overlay SYSTEM "chrome://minion/locale/minion.dtd">
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="mpdPlaylist">
        <content>
            <xul:tree
                label="Playlist"
                xbl:inherits="mpm_name"
                mpm_name="unknown"
                flex="1"
                flags="dont-build-content"
                enableColumnDrag="true"
                ondblclick="var a=this.parentNode.activeItem;if(a)nsMPM.mpd.doCmd('play '+a.Pos)">
                <children/>
                <xul:treecols>
                    <xul:treecol id="Pos" label="&position;" ordinal="1" width="30px"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 tooltiptext="&minion.positiontt;"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitPos" class="tree-splitter" ordinal="2" />
                    <xul:treecol id="Track" label="&track;" ordinal="3" width="60px"
                                 persist="width ordinal hidden"
                                 collapsed="true"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitTrack" class="tree-splitter" ordinal="4" />
                    <xul:treecol id="Title" label="&title;" ordinal="5" flex="2"
                                 persist="width ordinal hidden"
                                 overflow="true"
                                 class="sortDirectionIndicator"
                                 minwidth="120"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitTitle" class="tree-splitter" ordinal="6" />
                    <xul:treecol id="Time" label="&time;" ordinal="7" width="60px"
                                 hidden="false"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitTime" class="tree-splitter" ordinal="8" />
                    <xul:treecol id="Album" label="&album;" ordinal="9" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitAlbum" class="tree-splitter" ordinal="10" />
                    <xul:treecol id="Artist" label="&artist;" ordinal="11" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitArtist" class="tree-splitter" ordinal="12" />
                    <xul:treecol id="Performer" label="&performer;" ordinal="13" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitPerf" class="tree-splitter" ordinal="14" />
                    <xul:treecol id="Composer" label="&composer;" ordinal="15" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitComp" class="tree-splitter" ordinal="16" />
                    <xul:treecol id="Genre" label="&genre;" ordinal="17" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitGenre" class="tree-splitter" ordinal="18" />
                    <xul:treecol id="Date" label="&date;" ordinal="19" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitDate" class="tree-splitter" ordinal="20" />
                    <xul:treecol id="name" label="&filename;" ordinal="21" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                    <xul:splitter id="splitDisc" class="tree-splitter" ordinal="22" />
                    <xul:treecol id="Disc" label="&disc;" ordinal="23" flex="1"
                                 hidden="true"
                                 persist="width ordinal hidden"
                                 class="sortDirectionIndicator"
                                 onclick="this.parentNode.parentNode.parentNode.sort(this.id)"/>
                </xul:treecols>
                <xul:treechildren id="children"/>
            </xul:tree>
            <xul:box collapsed="true"
                xbl:inherits="persist=persist_columns"
                persist="Pos Title Time"/>
        </content>
        <handlers>
            <handler event="keypress" modifiers="accel" key="a"
                action="this.tree.view.selection.selectAll()"/>
            <handler event="keypress" key=" "
                action="var a=this.activeItem;if(nsMPM.mpd.song==a.Pos)nsMPM.mpd.doCmd('pause');else nsMPM.mpd.doCmd('play '+a.Pos)"/>
            <handler event="keypress" keycode="VK_DELETE"
                action="this.delete()"/>
            <handler event="keypress" keycode="VK_BACK"
                action="nsMPM.mpd.doCmd('stop', null, false)"/>
        </handlers>
        <implementation>
            <field name="view"/>
            <field name="tree">document.getAnonymousNodes(this)[0]</field>
            <field name="mpm_name">document.getAnonymousNodes(this)[0].getAttribute("mpm_name")</field>
            <field name="state">document.getAnonymousNodes(this)[1]</field>
            <field name="box"/>
            <field name="obsPL"/>
            <field name="obsLn"/>
            <field name="obsCurSong"/>
            <property name="activeItem"
                onget="try{return this.view.get(this.tree.currentIndex)}catch(e){return null}"
                readonly="true"/>
            <constructor>
                <![CDATA[
                Components.utils.import("resource://minion/mpmUtils.js");
                Components.utils.import("resource://minion/trees.js");

                var me = this
                nsMPM.debug(this.mpm_name)
                function applyView() {
                    nsMPM.debug("nsMPM.mpd.plinfo.length="+nsMPM.mpd.plinfo.length)
                    me.view = new arrayView(nsMPM.mpd.plinfo)
                    me.tree.view = me.view
                    me.box = me.tree.boxObject;
                    me.box.QueryInterface(Components.interfaces.nsITreeBoxObject);
                }
                applyView()
                this.obsPL = {
                    observe: function(subject,topic,data){
                        nsMPM.debug("obsPL: "+data)
                        var idx = me.box.getFirstVisibleRow()
                        applyView()
                        if (idx < me.view.rowCount) {
                            me.box.scrollToRow(idx)
                        }
                        else {
                            me.box.ensureRowIsVisible(me.view.rowCount-1)
                        }
                    }
                };
                this.obsCurSong = {
                    observe: function(subject,topic,data){
                        box.invalidate()
                    }
                };
                nsMPM.observerService.addObserver(this.obsPL,'plinfo',false)
                nsMPM.observerService.addObserver(this.obsCurSong,'state',false)
                nsMPM.observerService.addObserver(this.obsCurSong,'file',false)
                try {
                    var colprops = nsMPM.prefs.get(this.mpm_name+"_columns", "")
                    function setCol(val, index, arr) {
                        props = val.split(":")
                        if (props[0] > "") {
                            var c = document.getAnonymousElementByAttribute(this, 'id', props[0])
                            c.hidden = (props[1]=="true")
                            c.setAttribute("width", props[2])
                            c.setAttribute("ordinal", props[3])
                        }
                    }
                    if (colprops > "") {
                        var cols = colprops.split(";")
                        cols.forEach(setCol, this)
                    } else {
                        var cols=me.state.persist.split(" ")
                        for (i=0;i<cols.length;i++) {
                            var c = document.getAnonymousElementByAttribute(me, 'id', cols[i])
                            c.setAttribute("ordinal", i)
                            c.setAttribute("hidden", false)
                        }
                    }
                } catch (e) {
                    nsMPM.debug(e)
                }
                ]]>
            </constructor>
            <destructor>
                <![CDATA[
                nsMPM.observerService.removeObserver(this.obsPL,'plinfo')
                nsMPM.observerService.removeObserver(this.obsCurSong,'state')
                nsMPM.observerService.removeObserver(this.obsCurSong,'file')
                ]]>
            </destructor>
            <method name="crop">
                <body>
                    <![CDATA[
						var cmd = "command_list_begin"
						var L = nsMPM.mpd.playlistlength
						for (var i=0;i<L;i++) {
							if (i != nsMPM.mpd.song) cmd +="\ndeleteid "+nsMPM.mpd.plinfo[i].Id
						}
						cmd += "\ncommand_list_end"
						nsMPM.mpd.doCmd(cmd, null, false)
                    ]]>
                </body>
            </method>
            <method name="delete">
                <body>
                <![CDATA[
                var tree = this.tree
                var view = this.view
                var start = new Object();
                var end = new Object();
                var numRanges = view.selection.getRangeCount();
                var offset = 0
                var item
                var cmd = "command_list_begin"

                for (var t=0; t<numRanges; t++){
                    view.selection.getRangeAt(t,start,end);
                    for (var v=start.value; v<=end.value; v++){
                        item = view.get(v)
                        if (item.type == 'file' && item.Pos > -1) {
                            cmd += "\ndelete "+ (parseInt(item.Pos)-offset)
                            offset++
                        }
                    }
                }

                cmd += "\ncommand_list_end"
                nsMPM.mpd.doCmd(cmd, null, false)
                ]]>
                </body>
            </method>
            <method name="getActiveItem">
                <body>
                    <![CDATA[
                    return nsMPM.Nz(this.activeItem)
                    ]]>
                </body>
            </method>
            <method name="moveTo">
                <parameter name="moveToPos"/>
                <body>
                <![CDATA[
                var tree = this.tree
                var view = this.view
                var start = new Object();
                var end = new Object();
                var numRanges = view.selection.getRangeCount();
                var offset = 0
                var item
                var cmd = "command_list_begin"

                for (var t=0; t<numRanges; t++){
                    view.selection.getRangeAt(t,start,end);
                    for (var v=start.value; v<=end.value; v++){
                        item = view.get(v)
                        if (item.type == 'file') {
                            if (v < moveToPos) {
                                cmd += "\nmove "+ (v-offset) + " " + (moveToPos)
                                offset++
                            }
                            else {
                                cmd += "\nmove "+ v + " " + (moveToPos + 1 + offset)
                                offset++
                            }
                        }
                    }
                }

                cmd += "\ncommand_list_end"
                nsMPM.mpd.doCmd(cmd, null, false)
                ]]>
                </body>
            </method>
            <method name="moveFirst">
                <body>
                <![CDATA[
                this.moveTo(0)
                ]]>
                </body>
            </method>
            <method name="moveLast">
                <body>
                <![CDATA[
                this.moveTo(nsMPM.mpd.playlistlength-1)
                ]]>
                </body>
            </method>
            <method name="moveNext">
                <body>
                <![CDATA[
                var moveToPos = parseInt(nsMPM.mpd.song)
                this.moveTo(moveToPos)
                ]]>
                </body>
            </method>
            <method name="saveColumns">
                <body>
                <![CDATA[
                try {
                    if (this.boxObject.width < 1) return null
                    var col= this.tree.columns.getFirstColumn()
                    var colprops = ""
                    var i = 1
                    while (col) {
                        if (colprops > "") colprops += ";"
                        colprops += [col.id, (col.width==0), col.width, i++].join(":")
                        col = col.getNext()
                    }
                    nsMPM.prefs.set(this.mpm_name+"_columns", colprops)
                } catch (e) {
                    nsMPM.debug(e)
                }
                ]]>
                </body>
            </method>
            <method name="showCurrent">
                <body>
                <![CDATA[
                try {
                    var idx = nsMPM.mpd.song
                    if (idx) {
                        if (idx < this.view.rowCount) {
                            this.box.scrollToRow(idx)
                        }
                        else {
                            this.box.ensureRowIsVisible(this.view.rowCount-1)
                        }
                    }
                } catch (e) { nsMPM.debug(e) }
                ]]>
                </body>
            </method>
        </implementation>
    </binding>
</bindings>
